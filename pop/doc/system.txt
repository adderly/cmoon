lighttpd
========

lighttpd.conf
-------------

+ mod_rewrite
+ mod_expire


config-avilable
---------------

**************10-simple-vhost.conf:**************
(测试环境不使用fastcgi, 请取消以下 # 注释)

simple-vhost.default-host        = "www.kaiwuonline.com"

$HTTP["host"] == "www.kaiwuonline.com" {
  server.document-root = "/var/www/www.kaiwuonline.com/"
  url.rewrite-once= ("^/([^\.\?]+[^\/])$" => "/run/viki?ScriptName=$1",
                     "^/([^\.]+)\?(.*[^\/])$"   => "/run/viki?ScriptName=$1&$2")

#  $HTTP["url"] =~ "^/run/" {
#        cgi.assign = ( "" => "" )
#  }

  $HTTP["url"] =~ "^/img/" {
     expire.url = ( "" => "access 30 days" )
  }
  $HTTP["url"] =~ "^/obj/" {
     expire.url = ( "" => "access 30 days" )
  }
  $HTTP["url"] =~ "^.*\.html$" {
     expire.url = ( "" => "access 1 days" )
  }
}

$HTTP["host"] == "kaiwuonline.com" {
  server.document-root = "/var/www/www.kaiwuonline.com/"
  url.rewrite-once= ("^/([^\.\?]+[^\/])$" => "/run/viki?ScriptName=$1",
                     "^/([^\.]+)\?(.*[^\/])$"   => "/run/viki?ScriptName=$1&$2")

#  $HTTP["url"] =~ "^/run/" {
#        cgi.assign = ( "" => "" )
#  }

}

$HTTP["host"] == "js.kaiwuonline.com" {
  server.document-root = "/var/www/js.kaiwuonline.com/"
  expire.url = ("" => "access 1 days")
}

$HTTP["host"] == "css.kaiwuonline.com" {
  server.document-root = "/var/www/css.kaiwuonline.com/"
  expire.url = ("" => "access 1 days")
}

**************10-cgi.conf:**************

-$HTTP["url"] =~ "^/cgi-bin/" {
+$HTTP["url"] =~ "^/run/" {


**************10-fastcgi.conf:**************
(mkdir -p /var/run/lighttpd/sockets/ && chown www-data /var/run/lighttpd/sockets/)

var.socket_dir = "/var/run/lighttpd/sockets/"

fastcgi.server = ("viki" => 
	( "viki" =>
		(
			"socket" => socket_dir + "viki",
			"check-local" => "disable",
			"bin-path" => "/usr/local/moon/pop/run/viki",
			"min-procs" => 1,
			"max-procs" => 10,
			"idle-timeout" => 30
		)
	)
)


/usr/sbin/lighty-enable-mod

cd /var/www &&
ln -s /usr/local/moon/pop/fly www.kaiwuonline.com
ln -s /usr/local/moon/pop/fly/js js.kaiwuonline.com
ln -s /usr/local/moon/pop/fly/css css.kaiwuonline.com


postgresql
==========

0, post-installation setup
	LD_LIBRARY_PATH=/usr/local/pgsql/lib
	export LD_LIBRARY_PATH

    export PATH=/usr/local/pgsql/bin:$PATH

	root# mkdir /usr/local/pgsql/data
	root# chown postgres /usr/local/pgsql/data
    root# useradd postgres
	root# su postgres
	postgres$ initdb -D /usr/local/pgsql/data
    修改 /usr/local/pgsql/*.conf
    postgres -D /usr/local/pgsql/data
    pg_ctl -D /usr/local/pgsql/data -l logfile start

1, 建立 postgresql 账号
	用 postgres 用户登录psql,	执行
	CREATE USER lcser CREATEDB password 'loveu';
	这样就建立了一个 可以创建数据库的 lcser 用户, 通过非ident方式链接的时候密码为 loveu
	\du 查看当前用户
	select * from pg_trigger; 查看系统中所有的 trigger

2, 配置访问方式
	...pg_hba.conf
	----------------
	-local	all		all		ident	sameuser
	+local   all     lcser    ident lcser (8.3)
	+local   all         lcser	ident	map=lcser (8.4)
	#local 允许本地链接, all 数据库名, lcser 我们上面创建的数据库用户名,
	#ident 使用pg_ident.conf里的方式验证认证, lcser pg_ident.conf 中的关键字

	.../pg_ident.conf
	-----------------
	+lcser            bigml           lcser
	#lcser 关键字, pg_hba.con 中ident 后的映射方式, sameuser不用在这里存在
	#bigml Unix登录用户名, lcser postgresql 用户名(ROLE名)

3, 建立数据库
	用刚建立和配置的 lcser 账号登录:
	$psql -U lcser -d postgres (当前还没建立lcs_main库)
		create database lcs_main encoding='utf8';
		create database lcs_dyn encoding='utf8';
		create database lcs_mtool encoding='utf8';
		用postgres帐号登录:
		\c lcs_main
		CREATE LANGUAGE plpgsql; -- 开启 plpgsql 语言
        CREATE FUNCTION update_time() RETURNS TRIGGER AS $$ BEGIN NEW.uptime=now(); RETURN NEW; END; $$ LANGUAGE plpgsql;
		\c lcs_dyn
		CREATE LANGUAGE plpgsql;
        CREATE FUNCTION update_time() RETURNS TRIGGER AS $$ BEGIN NEW.uptime=now(); RETURN NEW; END; $$ LANGUAGE plpgsql;
	以后都可以用 $psql -U lcser -d lcs_main 登录

4, 修改postgresql可选配置
	/etc/postgresql/xx/main/postgresql.conf
	------------------
	
	-#fsync = on                    # turns forced synchronization on or off
	+fsync = off
	
	-#full_page_writes = on			# recover from partial page writes
	+full_page_writes = off			# recover from partial page writes

5, 建立mn表
   moon 登录 psql:
   \c lcs_main
   \i /usr/local/moon/pop/mtls/tables_main.sql
   \c lcs_dyn
   \i /usr/local/moon/pop/mtls/tables_dyn.sql
   \c lcs_mtool
   \i /usr/local/moon/pop/mtls/tables_mtls.sql

备注:
	上述配置, mnuser 只能以bigml通过 local 方式登录, 如需其他方式请修改 pg_hba.conf 文件,
	pg_ident.conf 文件只是在 认证方式为 ident 的时候配合修改(ident也可以存在于TCP/IP方式)
	关于 pg_hba.conf 的说明可以参考 http://www.chinaunix.net/jh/18/8176.html
